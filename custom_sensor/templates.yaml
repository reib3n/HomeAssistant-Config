- platform: template
  sensors:
    #----------------------------------------------------------------------
    zusatzheizung_aktiv_wohnzimmer_text:
      friendly_name: "Wohnz."
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_wohnzimmer.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    zusatzheizung_aktiv_wc_eg_text:
      friendly_name: "WC"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_wc_eg.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    zusatzheizung_aktiv_diele_text:
      friendly_name: "Diele"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_diele.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    zusatzheizung_aktiv_buro_text:
      friendly_name: "Büro"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_buro.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    zusatzheizung_aktiv_schlafzimmer_text:
      friendly_name: "Schlafz."
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_schlafzimmer.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    zusatzheizung_aktiv_erik_text:
      friendly_name: "Erik"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_erik.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    zusatzheizung_aktiv_linus_text:
      friendly_name: "Linus"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_linus.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    zusatzheizung_aktiv_bad_og_text:
      friendly_name: "Bad"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.zusatzheizung_aktiv_bad_og.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    evu_sperre_wgt_text:
      friendly_name: "EVU Sperre WGT Text"
      value_template: >-
        {% set mapper =  {
            '0' : 'Frei',
            '1' : 'GESPERRT' } %}
        {% set state =  states.sensor.evu_sperre_wgt.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_mode_text:
      friendly_name: "Modus"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Handbetrieb',
            '2' : 'Winterbetrieb',
            '3' : 'Sommerbetrieb',
            '4' : 'Sommer Abluft' } %}
        {% set state =  states.sensor.betriebsart_wgt.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_heizen_kuhlen_text:
      friendly_name: "WGT Heizen Kühlen"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Heizen',
            '2' : 'Kühlen',
            '3' : 'Auto T-Aussen',
            '4' : 'Auto Digitaler Eingang' } %}
        {% set state =  states.sensor.wgt_heizen_kuhlen.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_heizen_text:
      friendly_name: "WGT Heizen"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'Heizen' } %}
        {% set state =  states.sensor.wgt_heizen.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_kuhlen_text:
      friendly_name: "WGT Kühlen"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '1' : 'kühlen' } %}
        {% set state =  states.sensor.wgt_kuhlen.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_fehler_text:
      friendly_name: "WGT Fehler"
      value_template: >-
        {% set mapper =  {
            '0' : 'Kein Fehler',
            '257' : 'Drehzahl Zuluft fehlt',
            '258' : 'Drehzahl Abluft fehlt',
            '259' : 'Ventilator Zuluft Mindestdrehzahl nicht erreicht',
            '260' : 'Ventilator Abluft Mindestdrehzahl nicht erreicht',
            '261' : 'Ventilator Zuluft max. Drehzahl überschritten',
            '262' : 'Ventilator Abluft max. Drehzahl überschritten',
            '513' : 'Kommunikationsfehler zur BDE',
            '514' : 'Kommunikationsfehler Nebenbedieneinheit',
            '515' : 'Kommunikationsfehler Heizmodul',
            '516' : 'Kommunikationsfehler Sensor',
            '517' : 'Kommunikationsfehler Sensor-Adapter',
            '518' : 'Kommunikation Empfänger',
            '770' : 'Fehler Sensorelement T1-nach-Ewt',
            '771' : 'Fehler Sensorelement T2-nachVhr',
            '772' : 'Fehler Sensorelement T3-vorNhr',
            '773' : 'Fehler Sensorelement T4-nachNhr',
            '774' : 'Fehler Sensorelement T5-Abluft',
            '775' : 'Fehler Sensorelement T6-imWT',
            '776' : 'Fehler Sensorelement T7-Verdampfer',
            '777' : 'Fehler Sensorelement T8-Kondensator',
            '779' : 'Fehler Sensorelement T10-Außentemperatur',
            '1025' : 'Fehler Parameterspeicher',
            '1026' : 'Fehler System-Bus',
            '1281' : 'Wärmepumpe Hochdruck',
            '1282' : 'Wärmepumpe Niederdruck',
            '1283' : 'Maximale Abtauzeit überschritten',
            '1284' : 'Wärmepumpe Niederdruck im Kühlbetrieb' } %}
        {% set state =  states.sensor.wgt_fehler.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    status_waermepumpe_wgt_text:
      friendly_name: "WP"
      value_template: >-
        {% set mapper =  {
            '0' : 'Aus',
            '5' : 'Heizen',
            '49' : 'Kühlen' } %}
        {% set state =  states.sensor.status_waermepumpe_wgt.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_nhr_zustand_text:
      friendly_name: "WGT NHR Zustand"
      value_template: >-
        {% set mapper =  {
            '0' : 'Inaktiv',
            '1' : 'Aktiv' } %}
        {% set state =  states.sensor.wgt_nhr_zustand.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_status_zuluft_text:
      friendly_name: "WGT Status Zuluft"
      value_template: >-
        {% set mapper =  {
            '0' : 'Deaktiviert',
            '1' : 'Anlauf',
            '2' : 'Aktiv',
            '5' : 'Standby',
            '6' : 'Fehler' } %}
        {% set state =  states.sensor.wgt_status_zuluft.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}
    wgt_status_abluft_text:
      friendly_name: "WGT Status Abluft"
      value_template: >-
        {% set mapper =  {
            '0' : 'Deaktiviert',
            '1' : 'Anlauf',
            '2' : 'Aktiv',
            '5' : 'Standby',
            '6' : 'Fehler' } %}
        {% set state =  states.sensor.wgt_status_abluft.state %}
        {{ mapper[state] if state in mapper else 'Unknown' }}

    wgt_zuluft_total:
      friendly_name: "WGT Zuluft total"
      value_template: "{{ states('sensor.wgt_status_zuluft_text') }}"
      attribute_templates:
        Leistung: "{{ states('sensor.luftleistung_zuluft_wgt') + '%'}}"
        Drehzahl: "{{ states('sensor.drehzahl_zuluft_wgt') + ' rpm'}}"
        Temperatur: "{{ states('sensor.temp_aussen_low') + '°C'}}"

    wgt_abluft_total:
      friendly_name: "WGT Abluft total"
      value_template: "{{ states('sensor.wgt_status_abluft_text') }}"
      attribute_templates:
        Leistung: "{{ states('sensor.luftleistung_abluft_wgt') + '%'}}"
        Drehzahl: "{{ states('sensor.drehzahl_abluft_wgt') + ' rpm'}}"
        Temperatur: "{{ states('sensor.temperatur_abluft') + '°C'}}"

    wgt_heatpump_total:
      friendly_name: "WGT Wärmepumpe total"
      value_template: "{{ states('sensor.status_waermepumpe_wgt_text') }}"
      attribute_templates:
        Lufttemperatur: "{{ states('sensor.temperatur_nach_ne') + '°C'}}"

    zistern_water_today:
      friendly_name: "Zisternenwasser Entnahme heute"
      unit_of_measurement: "l"
      value_template: "{{ ((states.sensor.zisternenentnahme_heute.state | float * 1000)) | round(0) }}"

    #    water_today:
    #      friendly_name: "Trinkwasser Entnahme heute"
    #      unit_of_measurement: "l"
    #      value_template: "{{ ((states.sensor.zisternenentnahme_heute.state | float * 1000)) | round(0) }}"

    #------------------------SOLAR EDGE---------------------------------------
    mb_solaredge_garage_status_text:
      friendly_name: "SolarEdge Wechselrichter Garage Status"
      value_template: >-
        {% if is_state('sensor.mb_solaredge_garage_status', '1') %}
          Off
        {% elif is_state('sensor.mb_solaredge_garage_status', '2') %}
          Sleeping
        {% elif is_state('sensor.mb_solaredge_garage_status', '3') %}
          Starting
        {% elif is_state('sensor.mb_solaredge_garage_status', '4') %}
          Productive
        {% elif is_state('sensor.mb_solaredge_garage_status', '5') %}
          Throttled
        {% elif is_state('sensor.mb_solaredge_garage_status', '6') %}
          Shutting Down
        {% elif is_state('sensor.mb_solaredge_garage_status', '7') %}
          Fault
        {% elif is_state('sensor.mb_solaredge_garage_status', '8') %}
          Maintenance
        {% endif %}

    mb_solaredge_garage_energy_now_final:
      friendly_name: "PV Garage Power now"
      value_template: '{{ (states("sensor.mb_solaredge_garage_energy_now") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_AC_Power_SF") | float(-3))) }}'
      unit_of_measurement: "W"

    mb_solaredge_garage_temp_final:
      friendly_name: "Temperatur Wechselrichter Garage"
      value_template: '{{ ((states("sensor.mb_solaredge_garage_temp") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_temp_sf") | float(-3)))) | round(1) }}'
      unit_of_measurement: "°C"

    mb_solaredge_garage_energy_lifetime_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_AC_LifetimeEnergy") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_AC_LifetimeEnergy_SF") | float(-1))) * 0.001) | round(2) }}'
      unit_of_measurement: "kWh"
      device_class: energy

    mb_solaredge_garage_dc_current_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_DC_Current") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_DC_Current_SF") | float(-3)))) | round(2) }}'
      unit_of_measurement: "A"

    mb_solaredge_garage_dc_voltage_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_DC_voltage") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_DC_voltage_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "V"

    mb_solaredge_garage_dc_power_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_DC_power") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_DC_power_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "W"

    mb_solaredge_garage_ac_current_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_aC_Current") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_ac_Current_SF") | float(-3)))) | round(2) }}'
      unit_of_measurement: "A"

    mb_solaredge_garage_ac_voltage_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_aC_voltage") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_ac_voltage_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "V"

    mb_solaredge_garage_ac_freq_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_ac_freq") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_ac_freq_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "Hz"

    mb_solaredge_garage_ac_va_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_ac_va") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_ac_va_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VA"

    mb_solaredge_garage_ac_var_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_ac_var") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_ac_var_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VAR"

    mb_solaredge_garage_ac_pf_final:
      value_template: '{{ ((states("sensor.mb_solaredge_garage_ac_pf") | float(0)) * (10 ** (states("sensor.mb_solaredge_garage_ac_pf_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "%"

    #-------------- METER 1-------------------------

    mb_solaredge_m1_ac_power_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_power") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_power_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "W"

    mb_solaredge_m1_ac_power_a_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_power_A") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_power_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "W"

    mb_solaredge_m1_ac_power_b_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_power_B") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_power_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "W"

    mb_solaredge_m1_ac_power_c_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_power_C") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_power_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "W"

    mb_solaredge_m1_energy_w_import_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_energy_w_import") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_energy_w_SF") | float(-3))))  * 0.001 }}'
      unit_of_measurement: "kWh"

    mb_solaredge_m1_energy_w_export_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_energy_w_export") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_energy_w_SF") | float(-3))))  * 0.001 }}'
      unit_of_measurement: "kWh"

    mb_solaredge_m1_ac_current_a_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_current_A") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_current_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "A"

    mb_solaredge_m1_ac_current_b_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_current_B") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_current_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "A"

    mb_solaredge_m1_ac_current_c_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_current_C") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_current_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "A"

    mb_solaredge_m1_ac_volt_a_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_volt_A") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_volt_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "V"

    mb_solaredge_m1_ac_volt_b_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_volt_B") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_volt_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "V"

    mb_solaredge_m1_ac_volt_c_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_volt_C") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_volt_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "V"

    mb_solaredge_m1_ac_freq_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_ac_freq") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_ac_freq_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "Hz"

    mb_solaredge_m1_ac_power_app_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_app_sum") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_app_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VA"

    mb_solaredge_m1_ac_power_app_a_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_app_A") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_app_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VA"

    mb_solaredge_m1_ac_power_app_b_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_app_B") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_app_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VA"

    mb_solaredge_m1_ac_power_app_c_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_app_C") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_app_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VA"

    mb_solaredge_m1_ac_power_rea_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_rea_sum") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_rea_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VAR"

    mb_solaredge_m1_ac_power_rea_a_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_rea_A") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_rea_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VAR"

    mb_solaredge_m1_ac_power_rea_b_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_rea_B") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_rea_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VAR"

    mb_solaredge_m1_ac_power_rea_c_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_rea_C") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_rea_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "VAR"

    mb_solaredge_m1_ac_power_fac_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_fac_avg") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_fac_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "%"

    mb_solaredge_m1_ac_power_fac_a_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_fac_A") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_fac_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "%"

    mb_solaredge_m1_ac_power_fac_b_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_fac_B") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_fac_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "%"

    mb_solaredge_m1_ac_power_fac_c_final:
      value_template: '{{ ((states("sensor.mb_solaredge_m1_power_fac_C") | float(0)) * (10 ** (states("sensor.mb_solaredge_m1_power_fac_SF") | float(-3)))) | round(1) }}'
      unit_of_measurement: "%"

    #------------------------Garagentor Status---------------------------------------
    mb_garagentor_status_text:
      friendly_name: "Garagentor"
      value_template: >-
        {% if is_state('sensor.status_garagentor', '0') %}
          teilweise geöffnet
        {% elif is_state('sensor.status_garagentor', '1') %}
          Lüftungstellung
        {% elif is_state('sensor.status_garagentor', '2') %}
          geschlossen
        {% elif is_state('sensor.status_garagentor', '3') %}
          geöffnet
        {% endif %}

    #----------------------StateMachines-----------------------------------------
    status_spulmaschine:
      friendly_name: "Spülmaschine"
      value_template: >-
        {% if is_state('input_select.spulmaschine_state_machine', 'idle') %}
          untätig
        {% elif is_state('input_select.spulmaschine_state_machine', 'paused') %}
          pausiert
        {% elif is_state('input_select.spulmaschine_state_machine', 'detached_overload') %}
          überlastet
        {% elif is_state('input_select.spulmaschine_state_machine', 'job_ongoing') %}
          läuft
        {% elif is_state('input_select.spulmaschine_state_machine', 'job_completed') %}
          fertig
        {% elif is_state('input_select.spulmaschine_state_machine', 'unplugged') %}
          ausgesteckt
        {% endif %}
      attribute_templates:
        Leistung: "{{ (states('sensor.std_spulmaschine_leistung') | round(1))}} W"

    status_waschmaschine:
      friendly_name: "Waschmaschine"
      value_template: >-
        {% if is_state('input_select.waschmaschine_state_machine', 'idle') %}
          untätig
        {% elif is_state('input_select.waschmaschine_state_machine', 'paused') %}
          pausiert
        {% elif is_state('input_select.waschmaschine_state_machine', 'detached_overload') %}
          überlastet
        {% elif is_state('input_select.waschmaschine_state_machine', 'job_ongoing') %}
          läuft
        {% elif is_state('input_select.waschmaschine_state_machine', 'job_completed') %}
          fertig
        {% elif is_state('input_select.waschmaschine_state_machine', 'unplugged') %}
          ausgesteckt
        {% endif %}
      attribute_templates:
        Leistung: "{{ (states('sensor.waschmaschine_power') | round(1))}} W"

    #---------------------------- Rolladen -----------------------------------------
    cover_buro_optimistic:
      friendly_name: "Rolladen Büro optimistic Positiom"
      value_template: >-
        {% if 100 >= (states('sensor.buro_target_closure') | int(-1)) >= 0 %}
          {{ ( 100 | int) - (states('sensor.buro_target_closure') | int(0)) }}
        {% else %}
          {{ 100 | int }}
        {% endif %}

    cover_linus_sud_optimistic:
      friendly_name: "Rolladen Linus Süd optimistic Positiom"
      value_template: >-
        {% if 100 >= (states('sensor.linus_sud_target_closure') | int(-1)) >= 0 %}
          {{ ( 100 | int) - (states('sensor.linus_sud_target_closure') | int(0)) }}
        {% else %}
          {{ 100 | int }}
        {% endif %}

    weekday_german:
      value_template: >-
        {% set wochentage = ["Montag", "Dienstag", "Mittwoch", "Donnerstag", "Freitag", "Samstag", "Sonntag"] %}
        {{ wochentage[now().weekday()] }}

    date_german:
      value_template: >-
        {% set monat = ["Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember"] %}
        {% set monat = monat[now().month - 1] %}
        {{ now().day }}. {{ monat }} {{now().year}}
