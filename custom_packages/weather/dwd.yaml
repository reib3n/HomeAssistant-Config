package_weather_dwd:
  # packages/weather_dwd.yaml
  # -------------------------------------------------------------------
  # Package: Wetter
  # Verarbeitet die Informationen der Integration des DWD
  # -------------------------------------------------------------------

  # 1) WEATHER-INTEGRATION
  # >>> PASTE: BEGIN weather <<<
  # weather:
  #   # <-- Hier deinen vorhandenen weather:-Block einfügen (unverändert)
  # >>> PASTE: END weather <<<

  # 2) TEMPLATE-SENSOREN (aufgeteilt in zwei Blöcke)

  template:
    - sensor:
        - name: "DWD aktuelle Warnungen (Text)"
          unique_id: dwd_aktuelle_warnungen_text
          # Reads all warning_X_name attributes from your DWD sensor and joins them with " und "
          state: >
            {#-- Collect the number of warnings from the source sensor --#}
            {%- set count = state_attr('sensor.stadt_dornstetten_aktuelle_warnstufe', 'warning_count') | int(0) -%}
            {%- set ns = namespace(names=[]) -%}
            {#-- Iterate over all warnings and grab their names --#}
            {%- for i in range(1, count + 1) -%}
              {%- set wname = state_attr('sensor.stadt_dornstetten_aktuelle_warnstufe', 'warning_' ~ i ~ '_name') -%}
              {%- if wname is not none and (wname | string) | trim != '' -%}
                {%- set ns.names = ns.names + [ wname ] -%}
              {%- endif -%}
            {%- endfor -%}
            {{ ns.names | join(' und ') }}
          attributes:
            # Pass-through for transparency/debugging in UI
            source_entity: sensor.stadt_dornstetten_aktuelle_warnstufe
            attribution: "Data provided by DWD"

            # ---------------------- BLOCK 1: HOURLY FORECAST ----------------------
    - trigger:
        # alle 30 Minuten
        - trigger: time_pattern
          minutes: "/30"
        # zusätzlich nach HA-Start
        - trigger: homeassistant
          event: start

      action:
        - action: weather.get_forecasts
          data:
            type: hourly
          target:
            entity_id: weather.freudenstadt
          response_variable: forecast_data

      sensor:
        - name: "Forecast (4h) Temperature"
          unique_id: forecast_4h_temperature
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 4 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[4].temperature
              | float(default=unknown) }}
          unit_of_measurement: "°C"
          device_class: temperature
          state_class: measurement

        - name: "Forecast (4h) Condition"
          unique_id: forecast_4h_condition
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 4 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[4].condition | default('unknown') }}

        - name: "Forecast (4h) Wind Speed"
          unique_id: forecast_4h_wind_speed
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 4 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[4].wind_speed
              | float(default=unknown) }}
          unit_of_measurement: "m/s"
          device_class: wind_speed
          state_class: measurement

        - name: "Forecast (4h) Wind Gust Speed"
          unique_id: forecast_4h_wind_gust_speed
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 4 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[4].wind_gust_speed
              | float(default=unknown) }}
          unit_of_measurement: "m/s"
          device_class: wind_speed
          state_class: measurement

        - name: "Forecast (4h) Precipitation"
          unique_id: forecast_4h_precipitation
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 4 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[4].precipitation
              | float(default=unknown) }}
          unit_of_measurement: "mm"
          state_class: measurement

        - name: "Forecast (4h) Timestamp"
          unique_id: forecast_4h_timestamp
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 4 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[4].datetime | as_datetime | as_local }}

        # -------- 8h --------
        - name: "Forecast (8h) Temperature"
          unique_id: forecast_8h_temperature
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 8 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[8].temperature
              | float(default=unknown) }}
          unit_of_measurement: "°C"
          device_class: temperature
          state_class: measurement

        - name: "Forecast (8h) Condition"
          unique_id: forecast_8h_condition
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 8 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[8].condition | default('unknown') }}

        - name: "Forecast (8h) Wind Speed"
          unique_id: forecast_8h_wind_speed
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 8 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[8].wind_speed
              | float(default=unknown) }}
          unit_of_measurement: "m/s"
          device_class: wind_speed
          state_class: measurement

        - name: "Forecast (8h) Wind Gust Speed"
          unique_id: forecast_8h_wind_gust_speed
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 8 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[8].wind_gust_speed
              | float(default=unknown) }}
          unit_of_measurement: "m/s"
          device_class: wind_speed
          state_class: measurement

        - name: "Forecast (8h) Precipitation"
          unique_id: forecast_8h_precipitation
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 8 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[8].precipitation
              | float(default=unknown) }}
          unit_of_measurement: "mm"
          state_class: measurement

        - name: "Forecast (8h) Timestamp"
          unique_id: forecast_8h_timestamp
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 8 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[8].datetime | as_datetime | as_local }}

        # -------- 12h --------
        - name: "Forecast (12h) Temperature"
          unique_id: forecast_12h_temperature
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 12 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[12].temperature
              | float(default=unknown) }}
          unit_of_measurement: "°C"
          device_class: temperature
          state_class: measurement

        - name: "Forecast (12h) Condition"
          unique_id: forecast_12h_condition
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 12 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[12].condition | default('unknown') }}

        - name: "Forecast (12h) Wind Speed"
          unique_id: forecast_12h_wind_speed
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 12 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[12].wind_speed
              | float(default=unknown) }}
          unit_of_measurement: "m/s"
          device_class: wind_speed
          state_class: measurement

        - name: "Forecast (12h) Wind Gust Speed"
          unique_id: forecast_12h_wind_gust_speed
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 12 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[12].wind_gust_speed
              | float(default=unknown) }}
          unit_of_measurement: "m/s"
          device_class: wind_speed
          state_class: measurement

        - name: "Forecast (12h) Precipitation"
          unique_id: forecast_12h_precipitation
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 12 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[12].precipitation
              | float(default=unknown) }}
          unit_of_measurement: "mm"
          state_class: measurement

        - name: "Forecast (12h) Timestamp"
          unique_id: forecast_12h_timestamp
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 12 }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[12].datetime | as_datetime | as_local }}

    # ---------------------- BLOCK 2: DAILY FORECAST ----------------------
    - trigger:
        # alle 3 Stunden zur vollen Stunde
        - trigger: time_pattern
          hours: "/3"
          minutes: "0"
        # zusätzlich nach HA-Start
        - trigger: homeassistant
          event: start

      action:
        - action: weather.get_forecasts
          data:
            type: daily
          target:
            entity_id: weather.freudenstadt
          response_variable: forecast_data

      sensor:
        - name: "Forecast Weather Max Temp today"
          unique_id: forecast_weather_max_temp_today
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 0
              and (forecast_data['weather.freudenstadt'].forecast[0].temperature is defined) }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[0].temperature
              | float(default=unknown) }}
          unit_of_measurement: "°C"
          device_class: temperature
          state_class: measurement

        - name: "Forecast Weather Min Temp today"
          unique_id: forecast_weather_min_temp_today
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 0
              and (forecast_data['weather.freudenstadt'].forecast[0].templow is defined) }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[0].templow
              | float(default=unknown) }}
          unit_of_measurement: "°C"
          device_class: temperature
          state_class: measurement

        - name: "Forecast Weather Wind today"
          unique_id: forecast_weather_wind_today
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 0
              and (forecast_data['weather.freudenstadt'].forecast[0].wind_speed is defined) }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[0].wind_speed
              | float(default=unknown) }}
          unit_of_measurement: "m/s"
          device_class: wind_speed
          state_class: measurement

        - name: "Forecast Weather Regen today"
          unique_id: forecast_weather_regen_today
          availability: >
            {{ forecast_data is defined
              and forecast_data['weather.freudenstadt'] is defined
              and (forecast_data['weather.freudenstadt'].forecast | length) > 0
              and (forecast_data['weather.freudenstadt'].forecast[0].precipitation is defined) }}
          state: >
            {{ forecast_data['weather.freudenstadt'].forecast[0].precipitation
              | float(default=unknown) }}
          unit_of_measurement: "mm"
          state_class: measurement
