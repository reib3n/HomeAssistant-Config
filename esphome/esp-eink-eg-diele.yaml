esphome:
  name: "esp-eink-eg-diele"
  friendly_name: "esp-eink-eg-diele"
  on_boot:
    priority: 800
    then:
      - delay: 45s
      - script.execute: refresh_display

esp32:
  board: esp32dev
  framework:
    type: esp-idf

# Enable logging
logger:
  level: DEBUG
#  baud_rate: 0   # deaktiviert serielle Logs → schnellerer Boot

# Enable Home Assistant API
api:
  encryption:
    key: "p8NdKM2B3kH4ASNjawnEUo+nUQ6k20V1Y8Y4/u1/+7o="

ota:
  - platform: esphome
    password: "b8c22fe3b23e480d00ca5f61f8c7d294"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

#------------------------------------------------------------------
button:
  - platform: restart
    name: "eInk-EG-Diele - Restart"
  - platform: template
    name: "eInk-EG-Diele - Refresh Screen"
    entity_category: config
    on_press:
      - component.update: eink_display

time:
  - platform: homeassistant
    id: homeassistant_time

# Interval trigger for every 30 minutes
interval:
  - interval: 30min
    then:
      - script.execute: refresh_display

color:
  - id: COLOR_TEXT
    red: 0%
    green: 0%
    blue: 0%
    white: 0%
  - id: COLOR_BG
    red: 0%
    green: 0%
    blue: 0%
    white: 100%

# Script to refresh the display
script:
  - id: refresh_display
    mode: queued
    then:
      - lambda: |-
          int hour = id(homeassistant_time).now().hour;
          if (hour >= 6 && hour <= 23) {
            id(set_display_color_by_time).execute();
            id(eink_display).update();
          }
  - id: set_display_color_by_time
    mode: restart
    then:
      - lambda: |-
          int hour = id(homeassistant_time).now().hour;
          if (hour >= 6 && hour < 12) {
            id(COLOR_TEXT) = Color(0, 0, 0, 0);     // White
            id(COLOR_BG) = Color(255, 0, 0, 0);     // Red
          } else if (hour >= 12 && hour < 20) {
            id(COLOR_TEXT) = Color(0, 0, 0, 0);     // White
            id(COLOR_BG) = Color(0, 0, 0, 255);     // Black
          } else {
            id(COLOR_TEXT) = Color(0, 0, 0, 255);   // Black
            id(COLOR_BG) = Color(0, 0, 0, 0);       // White
          }
sun:
  latitude: 48.4706479
  longitude: 8.4824076

# Include custom fonts
font:
  - file: 'fonts/GothamRnd-Book.ttf'
    id: font_10_book
    size: 10
  - file: 'fonts/GothamRnd-Book.ttf'
    id: font_16_book
    size: 16
  - file: 'fonts/GothamRnd-Book.ttf'
    id: font_30_book
    size: 30
  - file: 'fonts/GothamRnd-Book.ttf'
    id: font_54_book
    size: 54
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_large_bold
    size: 54
  - file: 'fonts/GothamRnd-Bold.ttf'
    id: font_medium_bold
    size: 18

  # Include Material Design Icons font
  # Thanks to https://community.home-assistant.io/t/display-materialdesign-icons-on-esphome-attached-to-screen/199790/16
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_150_mdi
    size: 140
    glyphs: &mdi-weather-glyphs
      - "\U000F0590" # mdi-weather-cloudy
      - "\U000F0F2F" # mdi-weather-cloudy-alert
      - "\U000F0E6E" # mdi-weather-cloudy-arrow-right
      - "\U000F0591" # mdi-weather-fog
      - "\U000F0592" # mdi-weather-hail
      - "\U000F0F30" # mdi-weather-hazy
      - "\U000F0898" # mdi-weather-hurricane
      - "\U000F0593" # mdi-weather-lightning
      - "\U000F067E" # mdi-weather-lightning-rainy
      - "\U000F0594" # mdi-weather-night
      - "\U000F0F31" # mdi-weather-night-partly-cloudy
      - "\U000F0595" # mdi-weather-partly-cloudy
      - "\U000F0F32" # mdi-weather-partly-lightning
      - "\U000F0F33" # mdi-weather-partly-rainy
      - "\U000F0F34" # mdi-weather-partly-snowy
      - "\U000F0F35" # mdi-weather-partly-snowy-rainy
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F0597" # mdi-weather-rainy
      - "\U000F0598" # mdi-weather-snowy
      - "\U000F0F36" # mdi-weather-snowy-heavy
      - "\U000F067F" # mdi-weather-snowy-rainy
      - "\U000F0599" # mdi-weather-sunny
      - "\U000F0F37" # mdi-weather-sunny-alert
      - "\U000F14E4" # mdi-weather-sunny-off
      - "\U000F059A" # mdi-weather-sunset
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F059D" # mdi-weather-windy
      - "\U000F059E" # mdi-weather-windy-variant
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_100_mdi
    size: 100
    glyphs: *mdi-weather-glyphs
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_54_mdi
    size: 54
    glyphs:
      - "\U000F058E" # mdi-water-percent
      - "\U000F050F" # mdi-thermometer
      - "\U000F1A5F" # mdi-pool-thermometer
      - "\U000F06CC" # mdi-delete-empty
  - file: 'fonts/materialdesignicons-webfont.ttf'
    id: font_22_mdi
    size: 22
    glyphs:
      - "\U000F059C" # mdi-weather-sunset-up
      - "\U000F059B" # mdi-weather-sunset-down
      - "\U000F050F" # mdi-thermometer
      - "\U000F0596" # mdi-weather-pouring
      - "\U000F059D" # mdi-weather-windy
      - "\U000F0F38" # mdi-weather-tornado
      - "\U000F0143" # mdi-chevron-up
      - "\U000F0140" # mdi-chevron-down

sensor:
  - platform: wifi_signal
    name: "eInk-EG-Diele - WiFi Signal Strength"
    id: wifisignal
    unit_of_measurement: "dBm"
    entity_category: "diagnostic"
    update_interval: 60s

  - platform: homeassistant
    entity_id: sensor.temp_aussen_low
    id: out_temp
  - platform: homeassistant
    entity_id: sensor.ads_wetterhum
    id: out_hum
  - platform: homeassistant
    entity_id: sensor.freudenstadt_uv_index
    id: out_uv
  - platform: homeassistant
    entity_id: sensor.forecast_weather_max_temp_today
    id: temp_max_today
  - platform: homeassistant
    entity_id: sensor.forecast_weather_min_temp_today
    id: temp_min_today
  - platform: homeassistant
    entity_id: sensor.ibs_th2_p01b_00f0_temperature
    id: temp_pool

text_sensor:
  - platform: homeassistant
    entity_id: sensor.weekday_german
    id: weekday
  - platform: homeassistant
    entity_id: sensor.date_german
    id: date
  - platform: homeassistant
    entity_id: weather.freudenstadt
    id: weather_condition_now
  - platform: sun
    id: next_sunrise
    type: sunrise
  - platform: sun
    id: next_sunset
    type: sunset
  - platform: homeassistant
    entity_id: sensor.forecast_4h_timestamp
    id: forecast_4h_timestamp
  - platform: homeassistant
    entity_id: sensor.forecast_4h_condition
    id: forecast_4h_condition
  - platform: homeassistant
    entity_id: sensor.forecast_4h_temperature
    id: forecast_4h_temp
  - platform: homeassistant
    entity_id: sensor.forecast_4h_precipitation
    id: forecast_4h_precipitation
  - platform: homeassistant
    entity_id: sensor.forecast_4h_wind_speed
    id: forecast_4h_wind_speed
  - platform: homeassistant
    entity_id: sensor.forecast_4h_wind_gust_speed
    id: forecast_4h_wind_gust_speed
  - platform: homeassistant
    entity_id: sensor.forecast_8h_timestamp
    id: forecast_8h_timestamp
  - platform: homeassistant
    entity_id: sensor.forecast_8h_condition
    id: forecast_8h_condition
  - platform: homeassistant
    entity_id: sensor.forecast_8h_temperature
    id: forecast_8h_temp
  - platform: homeassistant
    entity_id: sensor.forecast_8h_precipitation
    id: forecast_8h_precipitation
  - platform: homeassistant
    entity_id: sensor.forecast_8h_wind_speed
    id: forecast_8h_wind_speed
  - platform: homeassistant
    entity_id: sensor.forecast_8h_wind_gust_speed
    id: forecast_8h_wind_gust_speed
  - platform: homeassistant
    entity_id: sensor.forecast_12h_timestamp
    id: forecast_12h_timestamp
  - platform: homeassistant
    entity_id: sensor.forecast_12h_condition
    id: forecast_12h_condition
  - platform: homeassistant
    entity_id: sensor.forecast_12h_temperature
    id: forecast_12h_temp
  - platform: homeassistant
    entity_id: sensor.forecast_12h_precipitation
    id: forecast_12h_precipitation
  - platform: homeassistant
    entity_id: sensor.forecast_12h_wind_speed
    id: forecast_12h_wind_speed
  - platform: homeassistant
    entity_id: sensor.forecast_12h_wind_gust_speed
    id: forecast_12h_wind_gust_speed

  - platform: homeassistant
    entity_id: sensor.forecast_weather_wind_today
    id: forecast_wind_today
  - platform: homeassistant
    entity_id: sensor.forecast_weather_regen_today
    id: forecast_rain_today

  - platform: homeassistant
    entity_id: sensor.abfalltermine_heute
    id: trash_today
  - platform: homeassistant
    entity_id: sensor.abfalltermine_morgen
    id: trash_tomorrow

# Pins for Waveshare ePaper ESP Board
spi:
  clk_pin: GPIO13
  mosi_pin: GPIO14

# Now render everything on the ePaper screen.
display:
  - platform: waveshare_epaper
    id: eink_display
    cs_pin: GPIO15
    dc_pin: GPIO27
    busy_pin: GPIO25
    reset_pin: GPIO26
    model: 7.50in-bv3-bwr
    reset_duration: 2ms
    update_interval: never
    rotation: 90
    lambda: |-

      it.fill(COLOR_BG);

      // Map weather states to MDI characters.
      std::map<std::string, std::string> weather_icon_map
      {
        {"cloudy", "\U000F0590"},
        {"cloudy-alert", "\U000F0F2F"},
        {"cloudy-arrow-right", "\U000F0E6E"},
        {"fog", "\U000F0591"},
        {"hail", "\U000F0592"},
        {"hazy", "\U000F0F30"},
        {"hurricane", "\U000F0898"},
        {"lightning", "\U000F0593"},
        {"lightning-rainy", "\U000F067E"},
        {"clear-night", "\U000F0594"},
        {"night-partly-cloudy", "\U000F0F31"},
        {"partlycloudy", "\U000F0595"},
        {"partly-lightning", "\U000F0F32"},
        {"partly-rainy", "\U000F0F33"},
        {"partly-snowy", "\U000F0F34"},
        {"partly-snowy-rainy", "\U000F0F35"},
        {"pouring", "\U000F0596"},
        {"rainy", "\U000F0597"},
        {"snowy", "\U000F0598"},
        {"snowy-heavy", "\U000F0F36"},
        {"snowy-rainy", "\U000F067F"},
        {"sunny", "\U000F0599"},
        {"sunny-alert", "\U000F0F37"},
        {"sunny-off", "\U000F14E4"},
        {"sunset", "\U000F059A"},
        {"sunset-down", "\U000F059B"},
        {"sunset-up", "\U000F059C"},
        {"tornado", "\U000F0F38"},
        {"windy", "\U000F059D"},
        {"windy-variant", "\U000F059E"}
      };
      
      bool data_missing = false;

      auto check_state = [&](auto id_ref, const char* sensor_name) {
        if (!id_ref->has_state()) {
          ESP_LOGW("display", "Sensorwert fehlt: %s", sensor_name);
          data_missing = true;
          return false;
        }
        return true;
      };

      // Datum
      if (check_state(id(date), "date"))
        it.printf(240, 30, id(font_medium_bold), COLOR_TEXT , TextAlign::TOP_CENTER, id(date).state.c_str());

      if (check_state(id(weekday), "weekday"))
        it.printf(240, 60, id(font_large_bold), COLOR_TEXT , TextAlign::TOP_CENTER, id(weekday).state.c_str());

      // Wetter-Icon
      std::string weather = check_state(id(weather_condition_now), "weather_condition_now") ? id(weather_condition_now).state : "cloudy";
      it.printf(35, 150, id(font_150_mdi), COLOR_TEXT , "%s", weather_icon_map[weather].c_str());

      // Temp MIN & MAX
      if (check_state(id(temp_max_today), "temp_max_today"))
        it.printf(283, 130, id(font_16_book), COLOR_TEXT , "%2.0f°C", id(temp_max_today).state);
      else
        it.printf(283, 130, id(font_16_book), COLOR_TEXT , "--°C");

      if (check_state(id(temp_min_today), "temp_min_today"))
        it.printf(357, 130, id(font_16_book), COLOR_TEXT , "%2.0f°C", id(temp_min_today).state);
      else
        it.printf(357, 130, id(font_16_book), COLOR_TEXT , "--°C");

      // Außentemperatur
      if (check_state(id(out_temp), "out_temp"))
        it.printf(280, 155, id(font_large_bold), COLOR_TEXT , "%2.0f°C", id(out_temp).state);
      else
        it.printf(280, 155, id(font_large_bold), COLOR_TEXT , "--°C");

      // Feuchtigkeit
      if (check_state(id(out_hum), "out_hum"))
        it.printf(280, 225, id(font_54_book), COLOR_TEXT , "%2.0f%%", id(out_hum).state);
      else
        it.printf(280, 225, id(font_54_book), COLOR_TEXT , "--%%");

      // UV-Index
      if (check_state(id(out_uv), "out_uv"))
        it.printf(80, 290, id(font_16_book), COLOR_TEXT , "UV: %2.0f", id(out_uv).state);
      else
        it.printf(80, 290, id(font_16_book), COLOR_TEXT , "UV: --");

      // Sonnenaufgang / -untergang
      auto sunrise = id(next_sunrise).state;
      if (sunrise.length() >= 5)
        it.printf(58, 130, id(font_16_book), COLOR_TEXT , sunrise.substr(0,5).c_str());
      else {
        it.printf(58, 130, id(font_16_book), COLOR_TEXT , "--:--");
        ESP_LOGW("display", "Sensorwert fehlt: next_sunrise");
        data_missing = true;
      }

      auto sunset = id(next_sunset).state;
      if (sunset.length() >= 5)
        it.printf(133, 130, id(font_16_book), COLOR_TEXT , sunset.substr(0,5).c_str());
      else {
        it.printf(133, 130, id(font_16_book), COLOR_TEXT , "--:--");
        ESP_LOGW("display", "Sensorwert fehlt: next_sunset");
        data_missing = true;
      }

      // Regenmenge
      if (check_state(id(forecast_rain_today), "forecast_rain_today"))
        it.printf(268, 290, id(font_16_book), COLOR_TEXT , "%s mm", id(forecast_rain_today).state.c_str());
      else
        it.printf(268, 290, id(font_16_book), COLOR_TEXT , "-- mm");

      // Windgeschwindigkeit
      if (check_state(id(forecast_wind_today), "forecast_wind_today"))
        it.printf(372, 290, id(font_16_book), COLOR_TEXT , "%s km/h", id(forecast_wind_today).state.c_str());
      else
        it.printf(372, 290, id(font_16_book), COLOR_TEXT , "-- km/h");

      // Vorhersage 4h
      auto ts4 = id(forecast_4h_timestamp).state;
      if (ts4.length() >= 13)
        it.printf(105, 390, id(font_medium_bold), COLOR_TEXT, TextAlign::TOP_CENTER, "%s Uhr", ts4.substr(11,2).c_str());
      else {
        it.printf(105, 390, id(font_medium_bold), COLOR_TEXT, TextAlign::TOP_CENTER, "-- Uhr");
        ESP_LOGW("display", "Sensorwert fehlt: forecast_4h_timestamp");
        data_missing = true;
      }

      std::string icon4 = check_state(id(forecast_4h_condition), "forecast_4h_condition") ? id(forecast_4h_condition).state : "cloudy";
      it.printf(105, 410, id(font_100_mdi), COLOR_TEXT , TextAlign::TOP_CENTER, "%s", weather_icon_map[icon4].c_str());

      check_state(id(forecast_4h_temp), "forecast_4h_temp");
      check_state(id(forecast_4h_precipitation), "forecast_4h_precipitation");
      check_state(id(forecast_4h_wind_speed), "forecast_4h_wind_speed");
      check_state(id(forecast_4h_wind_gust_speed), "forecast_4h_wind_gust_speed");

      // Vorhersage 8h
      auto ts8 = id(forecast_8h_timestamp).state;
      if (ts8.length() >= 13)
        it.printf(240, 390, id(font_medium_bold), COLOR_TEXT, TextAlign::TOP_CENTER, "%s Uhr", ts8.substr(11,2).c_str());
      else {
        it.printf(240, 390, id(font_medium_bold), COLOR_TEXT, TextAlign::TOP_CENTER, "-- Uhr");
        ESP_LOGW("display", "Sensorwert fehlt: forecast_8h_timestamp");
        data_missing = true;
      }

      std::string icon8 = check_state(id(forecast_8h_condition), "forecast_8h_condition") ? id(forecast_8h_condition).state : "cloudy";
      it.printf(240, 410, id(font_100_mdi), COLOR_TEXT , TextAlign::TOP_CENTER, "%s", weather_icon_map[icon8].c_str());

      check_state(id(forecast_8h_temp), "forecast_8h_temp");
      check_state(id(forecast_8h_precipitation), "forecast_8h_precipitation");
      check_state(id(forecast_8h_wind_speed), "forecast_8h_wind_speed");
      check_state(id(forecast_8h_wind_gust_speed), "forecast_8h_wind_gust_speed");

      // Vorhersage 12h
      auto ts12 = id(forecast_12h_timestamp).state;
      if (ts12.length() >= 13)
        it.printf(375, 390, id(font_medium_bold), COLOR_TEXT, TextAlign::TOP_CENTER, "%s Uhr", ts12.substr(11,2).c_str());
      else {
        it.printf(375, 390, id(font_medium_bold), COLOR_TEXT, TextAlign::TOP_CENTER, "-- Uhr");
        ESP_LOGW("display", "Sensorwert fehlt: forecast_12h_timestamp");
        data_missing = true;
      }

      std::string icon12 = check_state(id(forecast_12h_condition), "forecast_12h_condition") ? id(forecast_12h_condition).state : "cloudy";
      it.printf(375, 410, id(font_100_mdi), COLOR_TEXT , TextAlign::TOP_CENTER, "%s", weather_icon_map[icon12].c_str());

      check_state(id(forecast_12h_temp), "forecast_12h_temp");
      check_state(id(forecast_12h_precipitation), "forecast_12h_precipitation");
      check_state(id(forecast_12h_wind_speed), "forecast_12h_wind_speed");
      check_state(id(forecast_12h_wind_gust_speed), "forecast_12h_wind_gust_speed");

      // Pooltemperatur
      if (check_state(id(temp_pool), "temp_pool"))
        it.printf(105, 690, id(font_30_book), COLOR_TEXT , "%2.0f°C", id(temp_pool).state);
      else
        it.printf(105, 690, id(font_30_book), COLOR_TEXT , "--°C");

      // Mülltermine
      if (check_state(id(trash_today), "trash_today"))
        it.printf(255, 685, id(font_16_book), COLOR_TEXT , "%s", id(trash_today).state.c_str());
      else
        it.printf(255, 685, id(font_16_book), COLOR_TEXT , "--");

      if (check_state(id(trash_tomorrow), "trash_tomorrow"))
        it.printf(255, 725, id(font_16_book), COLOR_TEXT , "%s", id(trash_tomorrow).state.c_str());
      else
        it.printf(255, 725, id(font_16_book), COLOR_TEXT , "--");

      // Datenfehleranzeige
      if (data_missing) {
        it.printf(450, 20, id(font_16_book), COLOR_TEXT , "⚠️ Daten fehlen");
      }

      // Letzte Aktualisierung
      char str[17];
      time_t currTime = id(homeassistant_time).now().timestamp;
      strftime(str, sizeof(str), "%H:%M", localtime(&currTime));
      it.printf(240, 770, id(font_10_book), COLOR_TEXT , TextAlign::TOP_CENTER, "Letzte Aktualisierung %s", str);
