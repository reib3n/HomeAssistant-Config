# packages/wetter.yaml
# -------------------------------------------------------------------
# Package: Wetter
# Ziel: Struktur & Wartbarkeit verbessern – ohne Funktions- oder ID-Änderungen
# -------------------------------------------------------------------

# 1) WEATHER-INTEGRATION
# Füge hier deinen bisherigen 'weather:'-Block 1:1 ein (z. B. OpenWeather, DWD, Met.no).
# Beispielstruktur (NUR BEISPIEL, bitte deinen Originalblock einfügen!):
# weather:
#   - platform: openweathermap
#     api_key: !secret owm_api_key
#     name: Wetter Freudenstadt
#     mode: hourly

# >>> PASTE: BEGIN weather <<<
# weather:
#   # <-- Hier deinen vorhandenen weather:-Block einfügen (unverändert)
# >>> PASTE: END weather <<<

# 2) TEMPLATE-SENSOREN ODER MODERNE 'template:'-DEFINITIONEN FÜR WETTER
template:
  - trigger:
      - trigger: time_pattern
        minutes: "1"
    action:
      - action: weather.get_forecasts
        data:
          type: hourly
        target:
          entity_id: weather.freudenstadt
        response_variable: forecast_data
    sensor:
      - name: "Forecast (4h) Temperature"
        unique_id: forecast_4h_temperature
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[6].temperature }}
      - name: "Forecast (4h) Condition"
        unique_id: forecast_4h_condition
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[6].condition }}
      - name: "Forecast (4h) Wind Speed"
        unique_id: forecast_4h_wind_speed
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[6].wind_speed }}
      - name: "Forecast (4h) Wind Gust Speed"
        unique_id: forecast_4h_wind_gust_speed
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[6].wind_gust_speed }}
      - name: "Forecast (4h) Precipitation"
        unique_id: forecast_4h_precipitation
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[6].precipitation }}
      - name: "Forecast (4h) Timestamp"
        unique_id: forecast_4h_timestamp
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[6].datetime }}

      - name: "Forecast (8h) Temperature"
        unique_id: forecast_8h_temperature
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[10].temperature }}
      - name: "Forecast (8h) Condition"
        unique_id: forecast_8h_condition
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[10].condition }}
      - name: "Forecast (8h) Wind Speed"
        unique_id: forecast_8h_wind_speed
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[10].wind_speed }}
      - name: "Forecast (8h) Wind Gust Speed"
        unique_id: forecast_8h_wind_gust_speed
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[10].wind_gust_speed }}
      - name: "Forecast (8h) Precipitation"
        unique_id: forecast_8h_precipitation
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[10].precipitation }}
      - name: "Forecast (8h) Timestamp"
        unique_id: forecast_8h_timestamp
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[10].datetime }}

      - name: "Forecast (12h) Temperature"
        unique_id: forecast_12h_temperature
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[14].temperature }}
      - name: "Forecast (12h) Condition"
        unique_id: forecast_12h_condition
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[14].condition }}
      - name: "Forecast (12h) Wind Speed"
        unique_id: forecast_12h_wind_speed
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[14].wind_speed }}
      - name: "Forecast (12h) Wind Gust Speed"
        unique_id: forecast_12h_wind_gust_speed
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[14].wind_gust_speed }}
      - name: "Forecast (12h) Precipitation"
        unique_id: forecast_12h_precipitation
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[14].precipitation }}
      - name: "Forecast (12h) Timestamp"
        unique_id: forecast_12h_timestamp
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[14].datetime }}

  - trigger:
      - trigger: time_pattern
        minutes: "5"
    action:
      - action: weather.get_forecasts
        data:
          type: daily
        target:
          entity_id: weather.freudenstadt
        response_variable: forecast_data
    sensor:
      - name: "Forecast Weather Max Temp today"
        unique_id: forecast_weather_max_temp_today
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[0].temperature }}
      - name: "Forecast Weather Min Temp today"
        unique_id: forecast_weather_min_temp_today
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[0].templow }}
      - name: "Forecast Weather Wind today"
        unique_id: forecast_weather_wind_today
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[0].wind_speed }}
      - name: "Forecast Weather Regen today"
        unique_id: forecast_weather_regen_today
        state: >
          {{ forecast_data['weather.freudenstadt'].forecast[0].precipitation }}

# 3) AUTOMATIONEN/SKRIPTE NUR FÜRS WETTER
# Wenn du Automationen/Skripte hast, die ausschließlich Wetter betreffen (z. B. weather.get_forecasts),
# kannst du sie sauber hier bündeln. Syntax unverändert belassen.
#
# Beispiel Automation (BITTE NUR ALS FORM, DEIN ORIGINAL EINSETZEN):
# automation:
#   - id: wetter_forecast_refresh
#     alias: "Wetter: Forecast aktualisieren"
#     mode: single
#     trigger:
#       # <-- Übernimm deinen bisherigen Trigger UNVERÄNDERT (z. B. alle 30 Min / jede Minute)
#     action:
#       - action: weather.get_forecasts
#         target:
#           entity_id: weather.freudenstadt   # unverändert lassen!
#         data:
#           type: hourly
#         response_variable: forecast_data
#       # ggf. nachfolgende Template-Updates wie gehabt
#
# Beispiel Script (falls vorhanden):
# script:
#   wetter_update_forecast:
#     alias: "Wetter: Forecast manuell aktualisieren"
#     sequence:
#       - action: weather.get_forecasts
#         target:
#           entity_id: weather.freudenstadt
#         data:
#           type: hourly
#
# >>> PASTE: BEGIN automations_and_scripts <<<
# # <-- Hier deine bisherigen Wetter-Automationen/Skripte einfügen (unverändert)
# >>> PASTE: END automations_and_scripts <<<

# 4) OPTIONAL: HELFER, DIE NUR FÜR WETTER GENUTZT WERDEN
# Falls du spezielle input_boolean/input_number/input_select NUR fürs Wetter hast, hierher.
#
# >>> PASTE: BEGIN helpers <<<
# # <-- Optionale wetterbezogene Helpers (unverändert)
# >>> PASTE: END helpers <<<

# 5) OPTIONAL: CUSTOMIZE NUR FÜR WETTER-ENTITÄTEN
# Falls du 'homeassistant: customize:' mit Wetter-Entities hattest, kannst du sie in diesem Package
# lokal begrenzt erneut setzen (globale customize_glob bleibt unberührt).
#
# homeassistant:
#   customize:
#     weather.freudenstadt:
#       icon: mdi:weather-partly-cloudy
#
# >>> PASTE: BEGIN customize <<<
# # <-- Optionale Customize-Einträge für Wetter (unverändert)
# >>> PASTE: END customize <<<
